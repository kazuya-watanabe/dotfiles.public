" initialization
if has('vimscript-4')
    scriptversion 4
endif

syntax enable
filetype plugin indent on

if exists('*stdpath')
    let s:conf_dir = stdpath('config')
    let s:data_dir = stdpath('data')
elseif has('win32')
    let s:conf_dir = expand('~/vimfiles')
    let s:data_dir = expand('$LOCALAPPDATA/vim')
else
    let s:conf_dir = expand('~/.config/vim')
    let s:data_dir = expand('~/.local/share/vim')
endif

" options
set autoindent
set autoread
set belloff=all
set clipboard=unnamed
set cmdheight=2
set completeopt=menuone,longest,preview
set diffopt+=vertical
set display=lastline
set expandtab
set fileformats=unix,dos
set fillchars=vert:│,fold:─,foldopen:󰍝,foldclose:󰍟,foldsep:│,diff:─,eob:󰜥,lastline:
set formatoptions+=mM
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars=tab:󰅂─,leadmultispace:\ \ \ │,trail:󱓼,extends:󰄾,precedes:󰄽,conceal:
set nrformats-=octal
set ruler
set scrolloff=5
set shiftwidth=4
set shortmess+=a
set showcmd
set showmatch
set sidescrolloff=5
set signcolumn=yes
set smartcase
set smartindent
set smarttab
set softtabstop=-1
set spelllang=en,cjk
set spelloptions=camel
set splitbelow
set splitright
set statusline=%<%f\ %y%m%r%h%w%q%{'['.(&fileencoding!=''?&fileencoding:&encoding).']['.&fileformat.']'}%=%p%%\ [Ln:%l/%L\ Cl:%v]
set noswapfile
set tabstop=4
set ttimeout
set ttimeoutlen=100
set updatetime=300
set virtualedit=block
set whichwrap+=<,>,~,[,]
set wildignorecase
set wildmode=longest:full,full
set wildoptions=fuzzy,pum,tagfile
set nowrap
set nowritebackup

let &backupdir = s:data_dir .. '/backup'
let &directory = s:data_dir .. '/swap'
let &undodir = s:data_dir .. '/undo'
let &viewdir = s:data_dir .. '/view'

call mkdir(&backupdir, 'p')
call mkdir(&directory, 'p')
call mkdir(&undodir, 'p')
call mkdir(&viewdir, 'p')

let &showbreak = '󱞪   '

if executable('rg')
    set grepformat=%f:%l:%c:%m
    set grepprg=rg\ --vimgrep\ --follow\ --hidden
endif

if exists('+termguicolors')
    set termguicolors
endif

if !has('nvim')
    let &viminfofile = s:data_dir .. '/viminfo'
endif

if has('gui_running')
    set guioptions+=chk guioptions-=T guioptions-=e guioptions-=m
endif

if has('vim_starting')
    let &t_SI ..= "\e[6 q"
    let &t_EI ..= "\e[2 q"
    let &t_SR ..= "\e[4 q"
endif

if has('win32')
    set completeslash=slash
endif

try
    set completeopt+=fuzzy
catch
endtry

" autocmds
function! s:ReadLargeFile()
    if getfsize(expand('%')) > 2 * 1024 * 1024
        setlocal nobackup
        setlocal nocursorcolumn
        setlocal nocursorline
        setlocal lazyredraw
        setlocal nolist
        setlocal nonumber
        setlocal norelativenumber
        setlocal nospell
        setlocal noswapfile
        setlocal noundofile
        setlocal nowrap

        if stridx(&statusline, 'airline') >= 0
            AirlineToggle
        endif
    endif
endfunction

function! s:Nohlsearch()
    if v:hlsearch
        call feedkeys("\<cmd>nohlsearch\<cr>", 'm')
    endif
endfunction

augroup vimrc
    autocmd!
    autocmd BufNewFile,BufRead *.ahk,*.bat,*.cmd,*.ps1,*.reg,*.vb,*.vbs setlocal fileformat=dos fileencoding=cp932 completeslash=backslash
    autocmd BufNewFile,BufRead gitconfig,.gitconfig,*/git/config,*/.git/config setlocal tabstop=4 noexpandtab
    autocmd BufReadPre * call s:ReadLargeFile()
    autocmd CursorHold,InsertEnter * call s:Nohlsearch()
    autocmd FileType dbout,fugitive,help,qf nnoremap <silent><buffer> q :<C-u>quit<CR>
    autocmd FileType html,markdown,txt setlocal spell
    autocmd FileType aichat execute 'setlocal wrap | nnoremap <silent><buffer> <Leader>a :<C-u>AIChat<CR>'
    autocmd FileWritePre * silent call mkdir(expand('%:p:h'), 'p')
augroup END

" commands
function! s:BufferList()
    let l:list = []

    for buf in getbufinfo({ 'buflisted': 1 })
        if buf.name != ''
            call add(l:list, {
                        \ 'bufnr': buf.bufnr,
                        \ 'lnum': buf.lnum,
                        \ 'text': buf.loaded ? getbufoneline(buf.bufnr, buf.lnum) : 'Not loaded',
                        \ })
        endif
    endfor

    call setloclist(0, l:list, 'r')

    lopen
endfunction

command! -nargs=0 BufferList silent call s:BufferList()

command! -nargs=* Grep silent grep <args> | cwindow

command! Note silent execute 'edit ' .. strftime('~/Documents/Notes/%Y-%m/%Y-%m-%d.md')

" keymaps
let g:mapleader = ','
let g:maplocalleader = ' '

map n nzz
map N Nzz
map Y y$

map! <C-a> <Home>
map! <C-b> <Left>
map! <C-d> <Del>
map! <C-e> <End>
map! <C-f> <Right>
map! <C-n> <Down>
map! <C-p> <Up>

nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>

nmap <silent> t$ :<C-u>blast<CR>
nmap <silent> t0 :<C-u>brewind<CR>
nmap <silent> tc :<C-u>bdelete<CR>
nmap <silent> td :<C-u>bdelete<CR>
nmap <silent> tf :<C-u>brewind<CR>
nmap <silent> tl :<C-u>blast<CR>
nmap <silent> tn :<C-u>bnext<CR>
nmap <silent> tp :<C-u>bprevious<CR>

if has('win32') && executable('powershell')
    nmap <silent> <Leader>sh :<C-u>vertical terminal powershell<CR>
else
    nmap <silent> <Leader>sh :<C-u>vertical terminal<CR>
endif

" plugins
let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_logiPat = 1
let g:loaded_manpager_plugin = 1
let g:loaded_netrw = 1 | let g:loaded_netrwPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimballPlugin = 1

function! s:LoadPlugins(timer)
    let l:vimplug_path = s:conf_dir .. '/autoload/plug.vim'

    if !filereadable(l:vimplug_path)
        if executable('curl')
            call system('curl -fLo ' .. shellescape(l:vimplug_path) .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
        endif

        if !filereadable(l:vimplug_path)
            echoerr 'Please install the vim-plug manually. You can download it from https://github.com/junegunn/vim-plug and put it in ' .. l:vimplug_path
            finish
        endif
    endif

    if has('win32')
        let s:vimplug_data_dir = "$LOCALAPPDATA/vim-plug"
    elseif has('$XDG_DATA_HOME')
        let s:vimplug_data_dir = "$XDG_DATA_HOME/vim-plug"
    else
        let s:vimplug_data_dir = '~/.local/share/vim-plug'
    endif

    if executable('git') && plug#begin(s:vimplug_data_dir)
        " coc.nvim
        let g:coc_global_extensions = [
                    \ 'coc-snippets',
                    \ 'coc-markdown-preview-enhanced', 'coc-webview',
                    \ 'coc-vimlsp',
                    \ 'coc-json', 'coc-toml', 'coc-xml', 'coc-yaml',
                    \ 'coc-html', 'coc-css',
                    \ 'coc-tsserver', 'coc-eslint', 'coc-prettier',
                    \ 'coc-prisma', '@yaegassy/coc-volar',
                    \ ]

        if executable('clangd')
            call add(g:coc_global_extensions, 'coc-clangd')
        endif

        if executable('cmake')
            call add(g:coc_global_extensions, 'coc-cmake')
        endif

        if executable('docker')
            call add(g:coc_global_extensions, 'coc-docker')
        endif

        if executable('dotnet')
            call add(g:coc_global_extensions, 'coc-omnisharp')
        endif

        if executable('go')
            call add(g:coc_global_extensions, 'coc-go')
        endif

        if executable('javac')
            call add(g:coc_global_extensions, 'coc-java')
        endif

        if executable('lua') || executable('luajit')
            call add(g:coc_global_extensions, 'coc-lua')
        endif

        if executable('perl')
            call add(g:coc_global_extensions, 'coc-perl')
        endif

        if executable('php')
            call extend(g:coc_global_extensions, [
                        \ 'coc-phpls', 'coc-phpactor', 'coc-php-cs-fixer', '@yaegassy/coc-phpstan',
                        \ '@yaegassy/coc-laravel', 'coc-blade',
                        \ ])
        endif

        if executable('python3') || executable('python')
            call extend(g:coc_global_extensions, [ 'coc-pyright', 'coc-pydocstring' ])
        endif

        if executable('ruby')
            call add(g:coc_global_extensions, 'coc-solargraph')
        endif

        if executable('rustc')
            call add(g:coc_global_extensions, 'coc-rust-analyzer')
        endif

        if executable('sqlite3') || executable('psql') || executable('mysql')
            call add(g:coc_global_extensions, 'coc-sql')
        endif

        " fzf
        let g:fzf_action = { 'Ctrl-t': 'tab split', 'Ctrl-i': 'split', 'Ctrl-s': 'vsplit' }
        let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

        " nerdtree
        let g:NERDTreeBookmarksFile = s:data_dir .. '/NERDTreeBookmarks'
        let g:NERDTreeGitStatusUseNerdFonts = 1
        let g:NERDTreeIgnore = [ '\~$', '\.git$' ]
        let g:NERDTreeShowHidden = 1
        let g:NERDTreeWinSize = 30

        " vim-ai
        let g:vim_ai_chat = {
                    \ 'options': {
                    \   'model': 'gpt-4.1-mini',
                    \   'selection_boundary': '```',
                    \   },
                    \ }
        let g:vim_ai_complete = {
                    \ 'options': {
                    \   'model': 'gpt-4.1-mini',
                    \   },
                    \ }
        let g:vim_ai_edit = {
                    \ 'options': {
                    \   'model': 'gpt-4.1-mini',
                    \   },
                    \ }
        let g:vim_ai_chat_markdown = 1
        let g:vim_ai_token_file_path = '~/.config/openai.token'
        let g:vim_ai_roles_config_file = s:conf_dir .. '/roles.ini'

        " vim-airline
        let g:airline_extensions = [
                    \ 'branch',
                    \ 'tabline',
                    \ ]
        let g:airline_experimental = 1
        let g:airline_highlighting_cache = 1
        let g:airline_powerline_fonts = 1
        let g:airline_skip_empty_sections = 1
        let g:airline_left_sep = ''
        let g:airline_right_sep = ''
        let g:airline_left_alt_sep = ''
        let g:airline_right_alt_sep = ''

        if !exists('g:airline_symbols')
            let g:airline_symbols = {}
        endif

        let g:airline_symbols.linenr = ' '
        let g:airline_symbols.maxlinenr = ''
        let g:airline_symbols.colnr = ':'
        let g:airline_symbols.branch = '󰘬'
        let g:airline_symbols.paste = '󰆒 Paste'
        let g:airline_symbols.readonly = '󰑇 Readonly'
        let g:airline_symbols.spell = '󰓆 Spell'
        let g:airline_symbols.crypt = '󰌾 Crypt'
        let g:airline_symbols.dirty = ' 󱐋'
        let g:airline_symbols.notexists = ' 󱥸'
        let g:airline_symbols.whitespace = '󱗽󱞥'

        let g:airline#extensions#coc#error_symbol = '󰅖 Error:'
        let g:airline#extensions#coc#warning_symbol = '󰈅 Warning:'
        let g:airline#extensions#obsession#indicator_text = ' Session'

        " vim-devicons
        let g:webdevicons_enable_unite = 0
        let g:webdevicons_enable_vimfiler = 0
        let g:webdevicons_enable_ctrlp = 0
        let g:webdevicons_enable_startify = 0
        let g:webdevicons_enable_flagship_statusline = 0
        let g:webdevicons_enable_denite = 0

        if !exists('g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols')
            let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
        endif

        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[ 'vue' ] = '󰡄'

        " vim-polyglot
        let g:polyglot_disabled = [
                    \ 'autoindent',
                    \ 'ftdetect',
                    \ 'sensible',
                    \ 'markdown',
                    \ ]

        " vim-table-mode
        let g:table_mode_disable_mappings = 1
        let g:table_mode_disable_tableize_mappings = 1

        " Plugs
        Plug 'airblade/vim-gitgutter'
        Plug 'dhruvasagar/vim-table-mode'
        Plug 'easymotion/vim-easymotion'
        Plug 'editorconfig/editorconfig-vim'
        Plug 'github/copilot.vim'
        Plug 'preservim/nerdtree' | Plug 'Xuyuanp/nerdtree-git-plugin'
                    \ | if !has('win32')
                    \ |   Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
                    \ | endif
        Plug 'joshdick/onedark.vim'
        Plug 'markonm/hlyank.vim'
        Plug 'sheerun/vim-polyglot'
        Plug 'tpope/vim-commentary'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-obsession'
        Plug 'tpope/vim-repeat'
        Plug 'tpope/vim-surround'

        if executable('fzf')
            Plug 'junegunn/fzf' | Plug 'junegunn/fzf.vim'
        endif

        if executable('node')
            Plug 'neoclide/coc.nvim', { 'branch': 'release' } | Plug 'honza/vim-snippets'
        endif

        if has('python3')
            Plug 'madox2/vim-ai'
        endif

        Plug 'vim-airline/vim-airline'
        Plug 'ryanoasis/vim-devicons'

        call plug#end()

        if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            echomsg 'Please wait for a while to complete the installation.'
            PlugInstall --sync
        endif
    endif

    " coc.nvim
    if exists(':CocStart')
        CocStart

        autocmd vimrc CursorHold * silent call CocActionAsync('highlight')

        command! -nargs=0 Format :call CocActionAsync('format')
        command! -nargs=? Fold :call CocAction('fold', <f-args>)
        command! -nargs=0 OR :call CocActionAsync('runCommand', 'editor.action.organizeImport')
        command! -nargs=0 OpenLink :call CocAction('openLink')
        command! -nargs=0 OpenPreview :call CocActionAsync('runCommand', 'markdown-preview-enhanced.openPreview')

        function! s:ShowDocumentation()
            if CocAction('hasProvider', 'hover')
                call CocActionAsync('doHover')
            else
                call feedkeys('K', 'in')
            endif
        endfunction

        inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

        nnoremap <silent> K :call <SID>ShowDocumentation()<CR>

        nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
        nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

        nmap <silent><nowait> gd <Plug>(coc-definition)
        nmap <silent><nowait> gy <Plug>(coc-type-definition)
        nmap <silent><nowait> gi <Plug>(coc-implementation)
        nmap <silent><nowait> gr <Plug>(coc-references)

        nmap <Leader>rn <Plug>(coc-rename)

        xmap <Leader>f <Plug>(coc-format-selected)

        nmap <Leader>a <Plug>(coc-codeaction-selected)
        xmap <Leader>a <Plug>(coc-codeaction-selected)

        nmap <Leader>qf <Plug>(coc-fix-current)

        nmap <silent> <leader>r <Plug>(coc-codeaction-refactor)
        xmap <silent> <leader>r <Plug>(coc-codeaction-refactor-selected)

        if has('nvim-0.4.0') || has('patch-8.2.0750')
            nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
            inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
            inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
            vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
        endif

        let g:coc_snippet_next = '<C-j>'
        let g:coc_snippet_prev = '<C-k>'

        imap <C-l> <Plug>(coc-snippets-expand)
        vmap <C-j> <Plug>(coc-snippets-select)
        imap <C-j> <Plug>(coc-snippets-expand-jump)
        xmap <leader>x  <Plug>(coc-convert-snippet)
    endif

    " fzf
    if exists(':Files')
        command! -bang -nargs=* Grep
                    \ call fzf#vim#grep(
                    \   'rg --vimgrep --follow --hidden --color=always ' .. <q-args>,
                    \   fzf#vim#with_preview(),
                    \   <bang>0
                    \   )

        nmap <silent> <Leader>b :<C-u>Buffers<CR>
        nmap <silent> <Leader>f :<C-u>Files<CR>
        nmap <silent> <Leader>g :<C-u>GFiles<CR>
        nmap <silent> <Leader>l :<C-u>BLines<CR>
    endif

    " nerdtree
    if exists(':NERDTree')
        nnoremap <silent> <Leader>e :<C-u>NERDTreeToggle<CR>
    endif

    " onedark
    let l:colors_name = 'onedark'

    if !empty(getcompletion(l:colors_name, 'color'))
        set background=dark

        execute 'colorscheme ' .. l:colors_name

        let g:airline_theme = l:colors_name
    endif

    " vim-ai
    if exists(':AINewChat')
        delcommand AINewChat
    endif

    " vim-devicons
    if !exists('*WebDevIconsGetFileTypeSymbol')
        let g:NERDTreeGitStatusConcealBrackets = 1
    endif
endfunction

if has('gui_running')
    autocmd vimrc GUIEnter * call timer_start(10, function('s:LoadPlugins'))
else
    call timer_start(10, function('s:LoadPlugins'))
endif
