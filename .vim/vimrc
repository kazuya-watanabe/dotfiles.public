" initialization
if has('vimscript-4')
    scriptversion 4
endif

syntax enable
filetype plugin indent on

" options
set autoindent
set autoread
set background=dark
set belloff=all
set clipboard^=unnamed
set completeopt=longest,menuone,noselect,popup
set cmdheight=2
set diffopt+=vertical
set display=truncate
set encoding=utf-8
set expandtab
set fileformats=unix,dos
set fillchars=stl:\ ,stlnc:\ ,vert:│,fold:─,foldopen:,foldclose:,foldsep:│,diff:─,eob:_,lastline:󰅀,trunc:󰥭,truncrl:󰥼
set formatoptions+=mM
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:󰥭─,leadmultispace:\ \ \ │,trail:󱓼,extends:󰥭,precedes:󰥼,conceal:󱗽,nbsp:󱓼
set nrformats-=octal
set ruler
set scrolloff=4
set shiftwidth=4
set showbreak=󱞪\ \ \ 
set showcmd
set showmatch
set sidescroll=1
set sidescrolloff=8
set signcolumn=yes
set smartcase
set smartindent
set smarttab
set softtabstop=-1
set spelllang=en,cjk
set spelloptions=camel
set splitbelow
set splitright
set statusline=%<%f\ %y%m%r%h%w%q%{'['.(&fileencoding!=''?&fileencoding:&encoding).']['.&fileformat.']'}%=%p%%\ [%l/%L\ %v]
set noswapfile
set tabstop=4
set ttimeout
set ttimeoutlen=100
set updatetime=300
set virtualedit=block
set whichwrap+=<,>,~,[,]
set wildignorecase
set wildmode=longest:full,full
set wildoptions=fuzzy,pum,tagfile
set nowrap
set nowritebackup

if has('balloon_eval')
    set ballooneval
endif

if has('balloon_eval_term')
    set balloonevalterm
endif

try
    set completeopt+=fuzzy
catch
endtry

if has('win32')
    set completeslash=slash
endif

if executable('rg')
    set grepformat=%f:%l:%c:%m
    set grepprg=rg\ --vimgrep\ --follow\ --hidden
endif

if has('gui_running')
    set guioptions+=chk guioptions-=T guioptions-=e guioptions-=m
endif

if exists('+termguicolors')
    set termguicolors
endif

if has('vim_starting')
    let &t_SI ..= "\e[6 q"
    let &t_EI ..= "\e[2 q"
    let &t_SR ..= "\e[4 q"
endif

" autocmds
function! s:Nohlsearch()
    if v:hlsearch
        call feedkeys("\<cmd>nohlsearch\<cr>", 'm')
    endif
endfunction

augroup vimrc
    autocmd!
    autocmd BufNewFile,BufRead *.ahk,*.bat,*.cmd,*.ps1,*.reg,*.vb,*.vbs setlocal fileformat=dos fileencoding=cp932 completeslash=backslash
    autocmd BufNewFile,BufRead gitconfig,.gitconfig,*/git/config,*/.git/config setlocal tabstop=4 noexpandtab
    autocmd CursorHold,InsertEnter * call s:Nohlsearch()
    autocmd FileType aichat execute 'setlocal wrap | nnoremap <silent><buffer> <Leader>a :<C-u>AIChat<CR>'
    autocmd FileType dbout,fugitive,help,qf nnoremap <silent><buffer> q :<C-u>quit<CR>
    autocmd FileType html,markdown,txt setlocal spell shiftwidth=2
    autocmd FileType qf setlocal nobuflisted

    if executable('im-select')
        autocmd InsertLeave * :silent !im-select com.apple.keylayout.ABC
    elseif executable('zenhan.exe')
        autocmd InsertLeave * :silent !start /b zenhan.exe 0
    endif
augroup END

" commands
let s:note_directory = '~/Documents/Notes'
let s:note_filename = s:note_directory .. '/%Y-%m/%Y-%m-%d.md'
let s:note_template = s:note_directory .. '/.template.md'

function! s:Note(filename = '')
    if a:filename == ''
        let l:filename = strftime(s:note_filename)
    else
        let l:filename = a:filename
    endif

    execute 'edit ' .. expand(l:filename)

    call mkdir(expand('%:h'), 'p')

    if !filereadable(l:filename) && filereadable(expand(s:note_template))
        execute '0read ' .. expand(s:note_template)
    endif
endfunction

command! -nargs=* -complete=dir Grep silent grep! <args> | cwindow

command! -nargs=? -complete=file Note silent call s:Note(<q-args>)

" keymaps
let g:mapleader = ','
let g:maplocalleader = ' '

map j gj
map k gk
map n nzz
map N Nzz
map Y y$

map! <C-a> <Home>
map! <C-b> <Left>
map! <C-d> <Del>
map! <C-e> <End>
map! <C-f> <Right>
map! <C-n> <Down>
map! <C-p> <Up>

nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>

nmap <silent> t$ :<C-u>blast<CR>
nmap <silent> t0 :<C-u>brewind<CR>
nmap <silent> tc :<C-u>bdelete<CR>
nmap <silent> td :<C-u>bdelete<CR>
nmap <silent> tf :<C-u>brewind<CR>
nmap <silent> tl :<C-u>blast<CR>
nmap <silent> tn :<C-u>bnext<CR>
nmap <silent> tp :<C-u>bprevious<CR>

if has('win32') && executable('powershell')
    nmap <silent> <Leader>sh :<C-u>vertical terminal powershell<CR>
else
    nmap <silent> <Leader>sh :<C-u>vertical terminal<CR>
endif

" plugins
let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_logiPat = 1
let g:loaded_manpager_plugin = 1
let g:loaded_netrw = 1 | let g:loaded_netrwPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimballPlugin = 1

function! s:LoadPlugins(timer)
    let l:vimplug_path = has('win32')
                \   ? expand('$HOME/vimfiles/autoload/plug.vim')
                \   : has('nvim')
                \       ? expand(stdpath('config') .. '/autoload/plug.vim')
                \       : exists('$MYVIMDIR')
                \           ? expand('$MYVIMDIR/autoload/plug.vim')
                \           : expand('$HOME/.vim/autoload/plug.vim')

    if !filereadable(l:vimplug_path)
        if executable('curl')
            call system('curl -fLo ' .. shellescape(l:vimplug_path) .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
        endif

        if !filereadable(l:vimplug_path)
            echoerr 'Please install the vim-plug manually. You can download it from https://github.com/junegunn/vim-plug and put it in ' .. l:vimplug_path
            finish
        endif
    endif

    if executable('git') && plug#begin()
        " coc.nvim
        let $NVIM_COC_LOG_FILE = exists('$TMPDIR')
                    \   ? expand('$TMPDIR/coc.log')
                    \   : exists('$TEMP')
                    \       ? expand('$TEMP/coc.log')
                    \       : expand('$HOME/.coc.log')
        let $NVIM_COC_LOG_LEVEL = 'warn'

        let g:coc_global_extensions = [
                    \   'coc-highlight', 'coc-snippets',
                    \   'coc-json', 'coc-toml', 'coc-xml', 'coc-yaml',
                    \   'coc-markdown-preview-enhanced', 'coc-webview',
                    \   'coc-html', 'coc-class-css', 'coc-css',
                    \   'coc-vimlsp',
                    \   ]

        function! s:AddCocExtensionIfExecutable(executables, extensions)
            for executable in a:executables
                if executable(executable)
                    call extend(g:coc_global_extensions, a:extensions)
                    break
                endif
            endfor
        endfunction

        call s:AddCocExtensionIfExecutable([ 'bash' ], [ 'coc-sh' ])
        call s:AddCocExtensionIfExecutable([ 'clangd' ], [ 'coc-clangd', 'coc-clang-format-style-options' ])
        call s:AddCocExtensionIfExecutable([ 'cmake' ], [ 'coc-cmake' ])
        call s:AddCocExtensionIfExecutable([ 'gopls' ], [ 'coc-go', 'coc-golines' ])
        call s:AddCocExtensionIfExecutable([ 'javac' ], [ 'coc-java' ])
        call s:AddCocExtensionIfExecutable([ 'laravel' ], [ 'coc-blade', '@yaegassy/coc-laravel' ])
        call s:AddCocExtensionIfExecutable([ 'lua', 'luajit' ], [ 'coc-lua' ])
        call s:AddCocExtensionIfExecutable([ 'ng' ], [ 'coc-angular' ])
        call s:AddCocExtensionIfExecutable([ 'node' ], [ 'coc-tsserver', 'coc-eslint', 'coc-prettier' ])
        call s:AddCocExtensionIfExecutable([ 'perl' ], [ 'coc-perl' ])
        call s:AddCocExtensionIfExecutable([ 'php' ], [ 'coc-phpls', '@yaegassy/coc-phpstan', 'coc-php-cs-fixer' ])
        call s:AddCocExtensionIfExecutable([ 'phpactor' ], [ 'coc-phpactor' ])
        call s:AddCocExtensionIfExecutable([ 'python3', 'python' ], [ 'coc-pyright', 'coc-pydocstring' ])
        call s:AddCocExtensionIfExecutable([ 'ruby' ], [ 'coc-solargraph' ])
        call s:AddCocExtensionIfExecutable([ 'rustc' ], [ 'coc-rust-analyzer' ])
        call s:AddCocExtensionIfExecutable([ 'sqlite3', 'psql', 'mysql' ], [ 'coc-sql' ])
        call s:AddCocExtensionIfExecutable([ 'vue' ], [ '@yaegassy/coc-volar' ])

        " fzf
        if !exists('$FZF_DEFAULT_COMMAND')
            let $FZF_DEFAULT_COMMAND = 'fd --hidden --follow --type f'
        endif

        if !exists('$FZF_DEFAULT_OPTS')
            let $FZF_DEFAULT_OPTS = '--style full --height 40% --layout=reverse --preview "bat --color=always --style=plain --line-range=:500 {}"'
        endif

        let g:fzf_action = {
                    \   'Ctrl-t': 'tab split',
                    \   'Ctrl-i': 'split',
                    \   'Ctrl-s': 'vsplit'
                    \   }
        let g:fzf_layout = {
                    \   'window': { 'width': 0.9, 'height': 0.6 },
                    \   }
        let g:fzf_vim = {
                    \   'listproc': { list -> fzf#vim#listproc#quickfix(list) },
                    \   }

        " nerdtree
        let g:NERDTreeDirArrowExpandable = ''
        let g:NERDTreeDirArrowCollapsible = ''
        let g:NERDTreeGitStatusUseNerdFonts = 1
        let g:NERDTreeGitStatusIndicatorMapCustom = {
                    \   'Renamed': '󰁕',
                    \   'Deleted': '󰆴',
                    \   }
        let g:NERDTreeIgnore = [ '\~$', '\.git$' ]
        let g:NERDTreeShowHidden = 1
        let g:NERDTreeWinSize = 30

        " vim-ai
        let g:vim_ai_chat = {
                    \   'options': {
                    \       'model': 'gpt-4.1-mini',
                    \       'selection_boundary': '```',
                    \       },
                    \   }
        let g:vim_ai_complete = {
                    \   'options': {
                    \       'model': 'gpt-4.1-mini',
                    \       },
                    \   }
        let g:vim_ai_edit = {
                    \   'options': {
                    \       'model': 'gpt-4.1-mini',
                    \       },
                    \   }
        let g:vim_ai_chat_markdown = 1
        let g:vim_ai_token_file_path = exists('$XDG_CONFIG_HOME')
                    \   ? expand('$XDG_CONFIG_HOME/openai.token')
                    \   : expand('$HOME/.config/openai.token')
        let g:vim_ai_roles_config_file = has('win32')
                    \   ? expand('$HOME/vimfiles/roles.ini')
                    \   : has('nvim')
                    \       ? expand(stdpath('config') .. '/roles.ini')
                    \       : exists('$MYVIMDIR')
                    \           ? expand('$MYVIMDIR/roles.ini')
                    \           : expand('$HOME/.vim/roles.ini')

        " vim-airline
        let g:airline_experimental = 1
        let g:airline_extensions = [
                    \   'branch',
                    \   'coc',
                    \   'obsession',
                    \   'tabline',
                    \   ]
        let g:airline_highlighting_cache = 1
        let g:airline_powerline_fonts = 1
        let g:airline_skip_empty_sections = 1
        let g:airline_symbols = {
                    \   'linenr': ' ',
                    \   'maxlinenr': '',
                    \   'colnr': ':',
                    \   'branch': '󰘬',
                    \   'paste': '󰆒 Paste',
                    \   'readonly': '󰑇 Readonly',
                    \   'spell': '󰓆 Spell',
                    \   'crypt': '󰌾 Crypt',
                    \   'dirty': ' 󱐋',
                    \   'notexists': ' 󱥸',
                    \   'whitespace': '󱗽󱞥',
                    \   }

        let g:airline#extensions#coc#error_symbol = '󰅖 Error:'
        let g:airline#extensions#coc#warning_symbol = '󰈅 Warning:'
        let g:airline#extensions#obsession#indicator_text = ' Session'

        " vim-devicons
        let g:webdevicons_enable_unite = 0
        let g:webdevicons_enable_vimfiler = 0
        let g:webdevicons_enable_ctrlp = 0
        let g:webdevicons_enable_startify = 0
        let g:webdevicons_enable_flagship_statusline = 0
        let g:webdevicons_enable_denite = 0

        let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {
                    \   'vue': '󰡄'
                    \   }

        " vim-table-mode
        let g:table_mode_disable_mappings = 1
        let g:table_mode_disable_tableize_mappings = 1

        " Plugs
        Plug 'NLKNguyen/papercolor-theme'
        Plug 'airblade/vim-gitgutter'
        Plug 'dhruvasagar/vim-table-mode'
        Plug 'easymotion/vim-easymotion'
        Plug 'editorconfig/editorconfig-vim'
        Plug 'github/copilot.vim'
        Plug 'preservim/nerdtree' | Plug 'Xuyuanp/nerdtree-git-plugin' | Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
        Plug 'junegunn/vim-peekaboo'
        Plug 'markonm/hlyank.vim'
        Plug 'tpope/vim-commentary'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-obsession'
        Plug 'tpope/vim-repeat'
        Plug 'tpope/vim-surround'
        Plug 'vim-jp/vimdoc-ja'

        if executable('fzf')
            Plug 'junegunn/fzf' | Plug 'junegunn/fzf.vim'
        endif

        if executable('node')
            Plug 'neoclide/coc.nvim', { 'branch': 'release' } | Plug 'honza/vim-snippets'
        endif

        if has('python3')
            Plug 'madox2/vim-ai'
        endif

        Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
        Plug 'ryanoasis/vim-devicons'

        call plug#end()

        if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
            echomsg 'Please wait for a while to complete the installation.'
            PlugInstall --sync
        endif
    endif

    " coc.nvim
    if exists(':CocStart')
        CocStart

        autocmd vimrc CursorHold * silent call CocActionAsync('highlight')

        command! -nargs=0 Format :call CocActionAsync('format')
        command! -nargs=? Fold :call CocAction('fold', <f-args>)
        command! -nargs=0 OR :call CocActionAsync('runCommand', 'editor.action.organizeImport')
        command! -nargs=0 OpenLink :call CocAction('openLink')
        command! -nargs=0 OpenPreview :call CocActionAsync('runCommand', 'markdown-preview-enhanced.openPreview')

        function! s:ShowDocumentation()
            if CocAction('hasProvider', 'hover')
                call CocActionAsync('doHover')
            else
                call feedkeys('K', 'in')
            endif
        endfunction

        inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                    \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

        nnoremap <silent> K :call <SID>ShowDocumentation()<CR>

        nmap <silent><nowait> [g <Plug>(coc-diagnostic-prev)
        nmap <silent><nowait> ]g <Plug>(coc-diagnostic-next)

        nmap <silent><nowait> gd <Plug>(coc-definition)
        nmap <silent><nowait> gy <Plug>(coc-type-definition)
        nmap <silent><nowait> gi <Plug>(coc-implementation)
        nmap <silent><nowait> gr <Plug>(coc-references)

        nmap <Leader>rn <Plug>(coc-rename)

        xmap <Leader>f <Plug>(coc-format-selected)

        nmap <Leader>a <Plug>(coc-codeaction-selected)
        xmap <Leader>a <Plug>(coc-codeaction-selected)

        nmap <Leader>qf <Plug>(coc-fix-current)

        nmap <silent> <leader>r <Plug>(coc-codeaction-refactor)
        xmap <silent> <leader>r <Plug>(coc-codeaction-refactor-selected)

        if has('nvim-0.4.0') || has('patch-8.2.0750')
            nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
            inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
            inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
            vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
            vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
        endif

        autocmd vimrc CursorHold * silent call CocActionAsync('highlight')

        let g:coc_snippet_next = '<C-j>'
        let g:coc_snippet_prev = '<C-k>'

        imap <C-l> <Plug>(coc-snippets-expand)
        vmap <C-j> <Plug>(coc-snippets-select)
        imap <C-j> <Plug>(coc-snippets-expand-jump)
        xmap <leader>x  <Plug>(coc-convert-snippet)
    endif

    " fzf
    if exists(':Files')
        nmap <silent> <Leader>b :<C-u>Buffers<CR>
        nmap <silent> <Leader>f :<C-u>Files<CR>
        nmap <silent> <Leader>g :<C-u>GFiles<CR>

        command! -bang -nargs=* Rg call fzf#vim#grep('rg --column --line-number --no-heading --color=always --smart-case --hidden --follow -- ' .. fzf#shellescape(<q-args>), fzf#vim#with_preview(), <bang>0)
        command! -bang -nargs=* RG call fzf#vim#grep2('rg --column --line-number --no-heading --color=always --smart-case --hidden --follow -- ', <q-args>, fzf#vim#with_preview(), <bang>0)
    endif

    " nerdtree
    if exists(':NERDTree')
        nnoremap <silent> <Leader>e :<C-u>NERDTreeToggle<CR>
    endif

    " vim-ai
    if exists(':AINewChat')
        delcommand AINewChat
    endif

    " vim-devicons
    if !exists('*WebDevIconsGetFileTypeSymbol')
        let g:NERDTreeGitStatusConcealBrackets = 1
    endif

    " colorscheme
    if !empty(getcompletion('PaperColor', 'color'))
        colorscheme PaperColor
        let g:airline_theme = 'papercolor'
    endif
endfunction

if has('gui_running')
    autocmd vimrc GUIEnter * call timer_start(10, function('s:LoadPlugins'))
else
    call timer_start(10, function('s:LoadPlugins'))
endif
