" initialization
scriptversion 4
filetype plugin indent on

" options
set autoindent
set autoread
set background=dark
set ballooneval
set balloonevalterm
set belloff=all
set clipboard^=unnamed
set completeopt=fuzzy,menuone,longest,popup,noselect
set cmdheight=2
set diffopt+=vertical
set display=truncate
set encoding=utf-8
set expandtab
set fileformats=unix,dos
set formatoptions+=mM
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set list
set listchars=tab:>-,leadmultispace:\ \ \ \|,trail:_,extends:>,precedes:<,conceal:*,nbsp:_
set nrformats-=octal
set ruler
set scrolloff=4
set shiftwidth=4
set showbreak=-->\ 
set showcmd
set showmatch
set sidescroll=1
set sidescrolloff=8
set signcolumn=yes
set smartcase
set smartindent
set smarttab
set softtabstop=-1
set spelllang=en,cjk
set spelloptions=camel
set splitbelow
set splitright
set statusline=%<%f\ %y%m%r%h%w%q%{'['.(&fileencoding!=''?&fileencoding:&encoding).']['.&fileformat.']'}%=%p%%\ [%l/%L\ %v]
set noswapfile
set tabstop=4
set termguicolors
set virtualedit=block
set whichwrap+=<,>,~,[,]
set wildignorecase
set wildmode=longest:full,full
set wildoptions=fuzzy,pum,tagfile
set nowrap
set nowritebackup

if has('win32')
    set completeslash=slash
endif

if executable('rg')
    set grepformat=%f:%l:%c:%m
    set grepprg=rg\ --vimgrep\ --follow\ --hidden
endif

if has('gui_running')
    set guioptions+=chk guioptions-=T guioptions-=e guioptions-=m
endif

if has('vim_starting')
    let &t_SI ..= "\e[6 q"
    let &t_EI ..= "\e[2 q"
    let &t_SR ..= "\e[4 q"
endif

" autocmds
augroup vimrc
    autocmd!
    autocmd BufNewFile,BufRead *.ahk,*.bat,*.cmd,*.ps1,*.reg,*.vb,*.vbs setlocal fileformat=dos fileencoding=cp932 completeslash=backslash
    autocmd BufNewFile,BufRead gitconfig,.gitconfig,*/git/config,*/.git/config setlocal tabstop=4 noexpandtab
    autocmd FileType help nmap <silent><buffer> q :<C-u>quit<CR>
    autocmd FileType qf setlocal nobuflisted

    if executable('im-select')
        autocmd InsertLeave * :silent !im-select com.apple.keylayout.ABC
    elseif executable('zenhan.exe')
        autocmd InsertLeave * :silent !start /b zenhan.exe 0
    endif
augroup END

" commands
command! -nargs=* -complete=dir Grep silent grep! <args> | cwindow

" keymaps
let g:mapleader = ','
let g:maplocalleader = ' '

map j gj
map k gk
map n nzz
map N Nzz
map Y y$

map! <C-a> <Home>
map! <C-b> <Left>
map! <C-d> <Del>
map! <C-e> <End>
map! <C-f> <Right>
map! <C-n> <Down>
map! <C-p> <Up>

nmap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>

nmap <silent> t$ :<C-u>blast<CR>
nmap <silent> t0 :<C-u>brewind<CR>
nmap <silent> tc :<C-u>bdelete<CR>
nmap <silent> td :<C-u>bdelete<CR>
nmap <silent> tf :<C-u>brewind<CR>
nmap <silent> tl :<C-u>blast<CR>
nmap <silent> tn :<C-u>bnext<CR>
nmap <silent> tp :<C-u>bprevious<CR>

if has('win32') && executable('powershell')
    nmap <silent> <Leader>sh :<C-u>vertical terminal ++close powershell<CR>
else
    nmap <silent> <Leader>sh :<C-u>vertical terminal ++close<CR>
endif

" plugins
let g:loaded_2html_plugin = 1
let g:loaded_getscriptPlugin = 1
let g:loaded_logiPat = 1
let g:loaded_manpager_plugin = 1
let g:loaded_netrw = 1 | let g:loaded_netrwPlugin = 1
let g:loaded_tutor_mode_plugin = 1
let g:loaded_vimballPlugin = 1

let s:vimplug_path = exists('$MYVIMDIR')
            \   ? expand('$MYVIMDIR/autoload/plug.vim')
            \   : has('win32')
            \       ? expand('$HOME/vimfiles/autoload/plug.vim')
            \       : expand('$HOME/.vim/autoload/plug.vim')

if !filereadable(s:vimplug_path)
    if executable('curl')
        call system('curl -fLo ' .. shellescape(s:vimplug_path) .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
    endif

    if !filereadable(s:vimplug_path)
        echoerr 'Please install the vim-plug manually. You can download it from https://github.com/junegunn/vim-plug and put it in ' .. s:vimplug_path

        finish
    endif
endif

if executable('git') && plug#begin()
    " copilot.vim
    let g:copilot_filetypes = {
                \   '*': v:true,
                \   'markdown': v:false,
                \   }

    " fzf
    if !exists('$FZF_DEFAULT_COMMAND')
        let $FZF_DEFAULT_COMMAND = 'fd --hidden --follow --type f'
    endif

    if !exists('$FZF_DEFAULT_OPTS')
        let $FZF_DEFAULT_OPTS = '--style full --height 40% --layout=reverse --preview "bat --color=always --style=plain --line-range=:500 {}"'
    endif

    let g:fzf_action = {
                \   'Ctrl-t': 'tab split',
                \   'Ctrl-i': 'split',
                \   'Ctrl-s': 'vsplit'
                \   }
    let g:fzf_layout = {
                \   'window': { 'width': 0.9, 'height': 0.6 },
                \   }
    let g:fzf_vim = {
                \   'listproc': { list -> fzf#vim#listproc#quickfix(list) },
                \   }

    " lightline.vim
    let g:lightline = {
                \   'colorscheme': 'sonokai',
                \   'component': {
                \       'filename': '%{ nerdfont#find(expand("%")) .. " " .. expand("%:t") }',
                \       'modified': '%{ &modified ? "󰏫" : "" }',
                \       'paste': '%{ &paste ? "󰆒" : "" }',
                \       'readonly': '%{ &readonly ? "󰌾" : "" }',
                \       'fileformat': '%{ nerdfont#fileformat#find(&fileformat) .. " " .. &fileformat }',
                \       'filetype': '%{ nerdfont#find(expand("%")) .. " " .. &filetype }',
                \       'spell': '%{ &spell ? "󰓆" : ""}',
                \       },
                \   'component_expand': {
                \       'buffers': 'lightline#bufferline#buffers',
                \       },
                \   'component_type': {
                \       'buffers': 'tabsel',
                \       },
                \   'separator': {
                \       'left': '',
                \       'right': ''
                \       },
                \   'subseparator': {
                \       'left': '',
                \       'right': ''
                \       },
                \   'tabline': {
                \       'left': [ ['buffers'] ],
                \       'right': [ ['close'] ]
                \       },
                \   }

    let g:lightline#bufferline#enable_nerdfont = 1
    let g:lightline#bufferline#margin_left = 1
    let g:lightline#bufferline#modified = ' 󰏫'
    let g:lightline#bufferline#read_only = ' 󰌾'

    set showtabline=2

    " sonokai
    let g:sonokai_better_performance = 1
    let g:sonokai_enable_italic = 1

    " vim-ai
    let g:vim_ai_chat_markdown = 1
    let g:vim_ai_token_file_path = exists('$XDG_CONFIG_HOME')
                \   ? expand('$XDG_CONFIG_HOME/openai.token')
                \   : expand('$HOME/.config/openai.token')
    let g:vim_ai_roles_config_file = exists('$MYVIMDIR')
                \   ? expand('$MYVIMDIR/roles.ini')
                \   : has('win32')
                \       ? expand('$HOME/vimfiles/roles.ini')
                \       : expand('$HOME/.vim/roles.ini')

    " vim-fern
    let g:fern#default_exclude = '^\%(\.git\|\.svn\|\.hg\|node_modules\|vendor\|dist\|build\)$'
    let g:fern#default_hidden = 1
    let g:fern#renderer = 'nerdfont'

    " Plugs
    Plug 'airblade/vim-gitgutter', { 'on': [], 'lazyload': v:true }
    Plug 'dhruvasagar/vim-table-mode', { 'for': 'markdown' }
    Plug 'easymotion/vim-easymotion', { 'on': [], 'lazyload': v:true }
    Plug 'editorconfig/editorconfig-vim', { 'on': [], 'lazyload': v:true }
    Plug 'github/copilot.vim', { 'on': [], 'lazyload': v:true }
    Plug 'itchyny/lightline.vim' | Plug 'mengelbrecht/lightline-bufferline'
    Plug 'lambdalisue/nerdfont.vim' | Plug 'lambdalisue/vim-glyph-palette'
    Plug 'lambdalisue/vim-fern', { 'on': 'Fern'} | Plug 'lambdalisue/vim-fern-renderer-nerdfont', { 'on': 'Fern' }
    Plug 'prabirshrestha/asyncomplete.vim', { 'on': [], 'lazyload': v:true } | Plug 'prabirshrestha/asyncomplete-lsp.vim', { 'on': [], 'lazyload': v:true }
    Plug 'prabirshrestha/vim-lsp' | Plug 'mattn/vim-lsp-settings', { 'on': [], 'lazyload': v:true }
    Plug 'sainnhe/sonokai'
    Plug 'tpope/vim-commentary', { 'on': [], 'lazyload': v:true }
    Plug 'tpope/vim-fugitive', { 'on': [], 'lazyload': v:true }
    Plug 'tpope/vim-repeat', { 'on': [], 'lazyload': v:true }
    Plug 'tpope/vim-surround', { 'on': [], 'lazyload': v:true }

    if executable('fzf')
        Plug 'junegunn/fzf', { 'on': [ 'FZF', 'Files', 'Buffers', 'GFiles' ]}
        Plug 'junegunn/fzf.vim', { 'on': [ 'Files', 'Buffers', 'GFiles' ]}
    endif

    if has('python3')
        Plug 'madox2/vim-ai', { 'on': [ 'AI', 'AIChat', 'AIEdit', 'AIImage' ]}
    endif

    call plug#end()

    if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
        echomsg 'Please wait for a while to complete the installation.'

        PlugInstall --sync

        echohl WarningMsg | echomsg 'Installation completed. Please restart Vim.' | echohl None

        finish
    endif

    function! s:LoadPlugs(timer)
        let l:list = []

        for l:name in keys(g:plugs)
            if get(g:plugs[ l:name ], 'lazyload', v:false)
                call add(l:list, l:name)
            endif
        endfor

        call plug#load(l:list)
    endfunction

    call timer_start(100, function('s:LoadPlugs'))

    " copilot.vim
    imap <M-n> <Plug>(copilot-next)
    imap <M-p> <Plug>(copilot-previous)

    " fzf
    nmap <silent> <Leader>b :<C-u>Buffers<CR>
    nmap <silent> <Leader>f :<C-u>Files<CR>
    nmap <silent> <Leader>g :<C-u>GFiles<CR>

    " sonokai
    colorscheme sonokai

    " vim-ai
    autocmd vimrc FileType aichat setlocal nobuflisted wrap | map! <silent><buffer> <S-CR> <Esc>:<C-u>AIChat<CR>

    " vim-fern
    nmap <silent> <Leader>e :<C-u>Fern .<CR>

    autocmd vimrc FileType fern nmap <silent><buffer> q :<C-u>quit<CR> | call glyph_palette#apply()

    " vim-fugitive
    autocmd vimrc FileType fugitive setlocal nobuflisted | nmap <silent><buffer> q :<C-u>quit<CR>

    " vim-lsp
    nmap <Leader>ca <plug>(lsp-code-action)
    nmap <Leader>cl <plug>(lsp-code-lens)
    nmap gd         <plug>(lsp-definition)
    nmap gs         <plug>(lsp-workspace-symbol-search)
    nmap gr         <plug>(lsp-references)
    nmap gi         <plug>(lsp-implementation)
    nmap gt         <plug>(lsp-type-definition)
    nmap [g         <plug>(lsp-previous-diagnostic)
    nmap ]g         <plug>(lsp-next-diagnostic)
    nmap <Leader>rn <plug>(lsp-rename)
    nmap K          <plug>(lsp-hover)

    function! s:FormatHandler(line1, line2) abort
        if a:line1 == 1 && a:line2 == line('$')
            execute 'LspDocumentFormat'
        else
            execute a:line1 .. ',' .. a:line2 .. 'LspDocumentRangeFormat'
        endif
    endfunction

    command! -nargs=0 -range=% Format call s:FormatHandler(<line1>, <line2>)
endif
